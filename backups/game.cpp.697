#include "User.h"
#include "Room.h"
#include "Item.h"
#include "Door.h"

#include <iostream>
#include <iomanip>
#include <math.h>
#include <vector> 
#include <string>
#include <algorithm>
#include <fstream>
#include <sstream>
 
#define EW 0
#define NS 1
#define CLOSED 0
#define OPEN 1
#define OUTSIDE 999
#define X_ROOMS 3
#define Y_ROOMS 3
#define TOTAL_ROOMS 9
#define EXIT_ROOM 7
#define MAX_DOORS 81
#define RANDOM_NUMBER 3

using namespace std;
// Function for looking around the room *****************************************************************************
void lookAround(User &user, Room rooms[], Door doors[])
{
        cout << "current room is: " << user.getLocation() << endl;
	
	if (rooms[user.getLocation()].getNorthDoor() != -1)
	{
		  cout << "There is a door on the north side in which you can move through." << endl;
	}
	
	if (rooms[user.getLocation()].getSouthDoor() != -1)
	{
		  cout << "There is a door on the south side in which you can move through." << endl;
	}
	
	if (rooms[user.getLocation()].getWestDoor() != -1)
	{
		  cout << "There is a door on the west side in which you can move through." << endl;
	}
	
	if (rooms[user.getLocation()].getEastDoor() != -1)
	{
		  cout << "There is a door on the east side in which you can move through." << endl;
	}

	cout << "There is currently a " << user.getItemName() << " in your inventory." << endl;
	
}

// Function for doing all sorts of fun stuff when you finish (displaying stats, writing to a certificate, etc)*******
void exitFunction(User &user, Room rooms[], Door door[], Item item)
{
	char conformation = 'n';
	while (conformation != 'y')
	{
		cout << "This will be a function in which we congratulate the user for finishing." << endl;
		cout << "This will occur at the end of the game." << endl;
		cout << "It will proceed to congraduate the user, explain some dumbass narrative, shit like that" << endl;
		cout << "It will also write out a 'certificate' of sorts because that's a requirement and why tf not." << endl;
		cout << "At this point, the program will ask if all of this makes sense like 'When you're finished reading, say 'y'. Otherwise, say anything else." << endl;
		cin >> conformation;
	}
	cout << "Thanks for playing! Please give me a good grade." << endl;
	exit(0);
}

// Function for moving around the house *****************************************************************************
void moveAround(User &user, Room rooms[], Door doors[], Item item)
{
	int choice;
	cout << "Which direction would you like to go? " << endl;
	cout << "1. North" << endl;
	cout << "2. South" << endl;
	cout << "3. West" << endl;
	cout << "4. East" << endl;
	cin >> choice;
	
	if (choice < 1 || choice > 4)
	{
		cout << "Invalid option. Please choose one of the provided options." << endl;
	}

	else if (choice == 1)
	{
		if (rooms[user.getLocation()].getNorthDoor() == -1)  
		{
			cout << endl;
			cout << "That's a wall, you can't go there." << endl;
		}
		
		else if (rooms[user.getLocation()].getNorthDoor() == -2)
		{
			if (user.getIfItemIsNeeded() == 0)
			{
				cout << "Unfortunately, the item you have is not the item needed to exit the house. Please go grab another item." << endl;
			}

			else
			{
				cout << "Congratulations! You have found the exit, and the key you have can open the door!" << endl;
				cout << "Exiting now" << endl;
				exit(0);
			}
		}

		else
		{
			cout << endl;
			cout << "Moving from room: " << user.getLocation() << endl;;
			user.setLocation(doors[rooms[user.getLocation()].getNorthDoor()].getNorthRoom());
			rooms[user.getLocation()].setIfVisited(true);
			cout << "Moved to room: " << user.getLocation() << endl;
		}
	}
	
	else if (choice == 2)
	{
		if (rooms[user.getLocation()].getSouthDoor() == -1)  
		{
			cout << endl;
			cout << "That's a wall, you can't go there." << endl;
		}

		else
		{
			cout << endl;
			cout << "Moving from room: " << user.getLocation() << endl;
			user.setLocation(doors[rooms[user.getLocation()].getSouthDoor()].getSouthRoom());
			rooms[user.getLocation()].setIfVisited(true);
			cout << "Moved to room: " << user.getLocation()<< endl;
		}
	}
	
	else if (choice == 3)
	{
		if (rooms[user.getLocation()].getWestDoor() == -1)  
		{
			cout << endl;
			cout << "That's a wall, you can't go there." << endl;
		}

		else
		{
			cout << endl;
			cout << "Moving from room: " << user.getLocation() << endl;
			user.setLocation(doors[rooms[user.getLocation()].getWestDoor()].getWestRoom());
			rooms[user.getLocation()].setIfVisited(true);
			cout << "Moved to room: " << user.getLocation() << endl;
		}
	}
	
	else
	{
		if (rooms[user.getLocation()].getEastDoor() == -1)  
		{
			cout << endl;
			cout << "That's a wall, you can't go there." << endl;
		}

		else
		{
			cout << endl;
			cout << "Moving from room: " << user.getLocation() << endl;
			user.setLocation(doors[rooms[user.getLocation()].getEastDoor()].getEastRoom());
			rooms[user.getLocation()].setIfVisited(true);
			cout << "Moved to room: " << user.getLocation() << endl;
		}
	}
}

string buildName(int identity)
{
	string identityString = to_string(identity);
	string fileName = identityString + ".txt";
	return fileName;
}

void exchangeItem(User &user, Room rooms[], Door doors[])
{
	// Pseudo:
	// 1. Display both items
	// 2. Display menu (Item 1, Item 2, or none and leave function)
	// 3. If user chooses 1, swap item 1 from room and user's current item
	// 4. If user chooses 2, swap item 2 from room and user's current item
	// 5. If user chooses none, cout "Ok!" 
	int choice;
	
	cout << endl;
	cout << "Your choices of items in this room are: " << endl;
	cout << "1. " << rooms[user.getLocation()].getItemName(0) << endl;
	cout << "2. " << rooms[user.getLocation()].getItemName(1) << endl;
	cout << endl;

	cout << "Which item would you like to swap? " << endl;
	cout << "If item 1, enter '1'" << endl;
	cout << "If item 2, enter '2'" << endl;
	cout << "If neither seem appealing, enter '3' to return to the main menu" << endl;
	
	cin >> choice;

	while (choice < 1 || choice > 3)
	{
		cout << "Invalid choice. Please enter one of the provided options." << endl;
		cin >> choice;
	}

	if (choice == 1)
	{
		Item tempItem1;
		tempItem1.setItemID(rooms[user.getLocation()].getItemID(0));
		tempItem1.setNameOfItem(rooms[user.getLocation()].getItemName(0));
		tempItem1.setIfItemIsNeeded(rooms[user.getLocation()].getIfItemIsNeeded(0));
	
		Item tempItem2;	
		tempItem2.setItemID(user.getItemID());
		tempItem2.setNameOfItem(user.getItemName());
		tempItem2.setIfItemIsNeeded(user.getIfItemIsNeeded());

		user.setItem(tempItem1);
		rooms[user.getLocation()].setItemAt(0, tempItem2);
		
		cout << "You have swapped your " << rooms[user.getLocation()].getItemName(0) << " for a " << user.getItemName() << endl;
		cout << endl;
	}

	else if (choice == 2)
	{
		
		Item tempItem1;
		tempItem1.setItemID(rooms[user.getLocation()].getItemID(1));
		tempItem1.setNameOfItem(rooms[user.getLocation()].getItemName(1));
		tempItem1.setIfItemIsNeeded(rooms[user.getLocation()].getIfItemIsNeeded(1));

		Item tempItem2;	
		tempItem2.setItemID(user.getItemID());
		tempItem2.setNameOfItem(user.getItemName());
		tempItem2.setIfItemIsNeeded(user.getIfItemIsNeeded());

		user.setItem(tempItem1);
		rooms[user.getLocation()].setItemAt(1, tempItem2);
		
		cout << "You have swapped your " << rooms[user.getLocation()].getItemName(1) << " for a " << user.getItemName() << endl;
		cout << endl;
	}

	else 
	{
		cout << "Returning to main menu" << endl;
		cout << endl;
	}
}

int split(string lineSequence, char delimitor, string splitArray[], int length)
{
  
        string temp; 
        // Establish a temporary variable used to transfer array values later 
        // in the fuction
        int lengthwords = 0; 
     
        if(lineSequence == "")
        // If the line doesn't exist, return 0
        {
            return 0;
        } 
      
        else
        {
       
        lineSequence = lineSequence + delimitor;
        // Ensure the sequence includes the delimitor as to prevent unwanted
        // values being populated
     
        for(int count = 0; count < lineSequence.length(); count++)
        // Enter for loop 
        {
           
            if(lineSequence[count] != delimitor)
            // If the character in the string at that certain point isn't 
            // the delimitor, set the temporary variable equal to the temp character
            // plus the new character
            {
                temp = temp + lineSequence[count];
            }
          
            else 
            // Else, create an entry in the array that equals the temp variable
            {
                if(temp.length()!=0)
                {
                    splitArray[lengthwords] = temp;  
                    lengthwords++; 
                }
                temp = ""; 
                // Clear the temp variable
            }
    
        }  
            if(lengthwords > length)
            // Ensure the number of times the loop was executed wasn't larger than the 
            // length of the array
            {
                return -1;
            }
        }
        return lengthwords;
        // Return the counter variable (lengthWords)
}

// Function for teleporting user to a random room********************************************************************
void teleportUser(User &user, Room rooms[])
{
	int randomRoom = (rand()%(X_ROOMS*Y_ROOMS) + 1);
	user.setLocation(randomRoom);
	cout << "You are now in room: " << user.getLocation() << endl;
}

void randomChoice(User &user, Room rooms[], Door doors[], Item item, int &counter)
{
	int choice;	
	int randomChoice = (rand()%20 + 1);
	if (counter < 1)
	{
		cout << endl;
		cout << "Unfortunately, you have used up all your attempts." << endl;	
	}

	else 
	{
		cout << "Are you sure you'd like to try your luck? There a 1 in 20 chance you'll succeed and you only have " << counter << " attempts." << endl;
		cout << "1. Yes." << endl;
		cout << "2. No." << endl;
		cin >> choice;
		
		while (choice < 1 || choice > 2)
		{
			cout << "Invalid choice. Please enter one of the provided options." << endl;
			cin >> choice;
		}
		
		if (choice == 1)
		{
			if (randomChoice == RANDOM_NUMBER)
			{
				cout << "Exit function." << endl;
			}

			else
			{
				cout << "Unfortunately, you did not get it. You still have " << counter - 1 << " attempts." << endl;
				counter--;
			}
					
		}
	}
}   

// Function for displaying a menu of what to do and calling to proper funcitons based on choice *********************
void decisionFunction(User &user, Room rooms[], Door doors[], Item &item, int &counterForOption5)
{
	int choice = 0;
	// int counterForOption5 = 3;
	cout << "What would you like to do, " << user.getName() << "?" << endl;
	cout << "1. Look around the room." << endl; 
	cout << "2. Move to a different room." << endl; 
	cout << "3. Exchange item." << endl; 
	cout << "4. Teleport to a random room." << endl;
	cout << "5. Take a 5 percent change on getting out of the house." << endl;
	cout << "6. Quit." << endl;
	cin >> choice;
	
	while (choice < 1 || choice > 6) 
	{
		cout << "Invalid choice. Please enter one of the provided options." << endl;
		cin >> choice;
	}

	if (choice == 1)
	{
		cout << endl;
		lookAround(user, rooms, doors);
		cout << endl;
	}

	else if (choice == 2)
	{
		cout << endl;
		moveAround(user, rooms, doors, item);
		cout << endl;
	}

	else if (choice == 3)
	{
		cout << endl;
		cout << "Calling the exchange item function." << endl;
		exchangeItem(user, rooms, doors);
		cout << endl;
	}

	else if (choice == 4)
	{
		cout << endl;
		cout << "Calling the teleport function." << endl;
		teleportUser(user, rooms);
		cout << endl;
	}
	else if (choice == 5)
	{
		cout << endl;
		cout << "Calling the take a chance funciton." << endl;
		randomChoice(user, rooms, doors, item, counterForOption5);
		cout << endl;
	}
	else
	{
		exit(0);
	}
}

// Main function: creates map, holds loop for game to continue to excecute ******************************************
int main()
{
        ifstream fileTool;
	
	Room rooms[TOTAL_ROOMS];
	Door doors[MAX_DOORS];

	int currentRoom = 0;
	int currentDoor = 0;
	for (int y = 0; y < Y_ROOMS; y++)
	{
		for(int x = 0; x < X_ROOMS; x++)
		{
			rooms[currentRoom].setXLocation(x);
			rooms[currentRoom].setYLocation(y);
		//	cout << "room: " << currentRoom << ", x-location: " << x << ", y-location: " << y << endl;
	
			if (x < X_ROOMS - 1)
			{
				// I'm not one of the east most rooms
				// make an east or west door
				doors[currentDoor].setOrientation(EW);
				doors[currentDoor].setWestRoom(currentRoom);
				doors[currentDoor].setEastRoom(currentRoom + 1);
				rooms[currentRoom].setEastDoor(currentDoor);
				// cout << "rooms[currentRoom].getEastDoor(): " << rooms[currentRoom].getEastDoor() << endl;
				rooms[currentRoom + 1].setWestDoor(currentDoor);
				// cout << "rooms[currentRoom + 1].getWestDoor(): " << rooms[currentRoom].getWestDoor() << endl;
				// cout << "door: " << currentDoor << ", direction: EW, west room: " << doors[currentDoor].getWestRoom() << ", east room: " << doors[currentDoor].getEastRoom() << endl;
				currentDoor++;
			} 

			else 
			{
				// I AM one of the east most rooms
			        rooms[currentRoom].setEastDoor(-1);
                        }
                        
			if ( x == 0 ) 
			{
			        rooms[currentRoom].setWestDoor(-1);
                        }
			
			if (y < Y_ROOMS - 1)
			{
				// I am NOT a top/north most edge room
				// make an north or south  door
				doors[currentDoor].setOrientation(NS);
				doors[currentDoor].setNorthRoom(currentRoom + X_ROOMS);
				doors[currentDoor].setSouthRoom(currentRoom);
				rooms[currentRoom].setNorthDoor(currentDoor);
				rooms[currentRoom+ X_ROOMS].setSouthDoor(currentDoor);
				// cout << "door: " << currentDoor << ", direction: NS, north room: " << doors[currentDoor].getNorthRoom() << ", south room: " << doors[currentDoor].getSouthRoom() << endl;
				currentDoor++;
			} 
			
			else 
			{
				// I AM     a top/north most edge room
			        rooms[currentRoom].setNorthDoor(-1);
                        }
                        
			if ( y == 0 ) 
			{
			        rooms[currentRoom].setSouthDoor(-1);
                        }

			if (rooms[currentRoom].getXLocation() == (X_ROOMS-2) && rooms[currentRoom].getYLocation() == (Y_ROOMS-1))
			{
				rooms[currentRoom].setNorthDoor(-2);
			}

                        //cout << "room[1].getWestDoor: " << rooms[1].getWestDoor() << " expecting 0" << endl;

			// cout << endl;
			currentRoom++;
		} 
	}
// Next segment of main ******************************************************************************************** 

    	for (int i = 0; i < (X_ROOMS * Y_ROOMS); i++)
	{
	        string fileName = buildName(i);
		fileTool.open(fileName);
        	//Use object to open file
       
        	if (fileTool.is_open())
        	// If file is open:
        	{
            		string line = ""; 
            		int counter = 0;
            		while (getline(fileTool, line))
            		// Enter while loop
            		{
                                string tmp[3];
	        		for (int i = 0; i < 3; i++)
                		{		
                    			tmp[i] = " ";
                		}
                  
                		split(line, ',', tmp, 3);

                		int itemID = stoi(tmp[0]);
                		string itemName = tmp[1];
                		int itemNeeded = stoi(tmp[2]);

                		Item temp;
                		// Split the line using the split function by commas
                		temp.setItemID(itemID);
                		// Set the first entry in the array equal to the author
              	  		temp.setNameOfItem(itemName);
                		// Set the second entry in the array equal to the title
              	  		temp.setIfItemIsNeeded(itemNeeded);
                		// Set the second entry in the array equal to the title
                		rooms[i].setItemAt(counter, temp);
 //               		rooms[i].addNewItemToRoom( itemID, itemName, itemNeeded );
                		// Store the index of the book array equal to the temp 
	               		// object 
                		counter++;
                		// Incriment the number of books now stored in the 
               			// arrays by 1
            		}
                }
        	
		else 
               	{
            		cout << "The file didn't open correctly" << endl;
        	}
	fileTool.close();
	}

//Creating an array of items ***********************************************************************************

//Next Segment of Main *****************************************************************************************
	User user;
	string name;
	int option;
	int counterForLaterFunction = 3;
	
	Item item;
	item.setItemID(-1);
	item.setNameOfItem("phone");
	item.setIfItemIsNeeded(0);
	
	cout << "Please enter a name: " << endl;
	cin >> name;
	cout << endl;
	
	user.setName(name);
	user.setLocation(0);
	user.setItem(item);
	
	while (1 > 0)
	{
		decisionFunction(user, rooms, doors, item, counterForLaterFunction);
	}
	
	return 0;
}




























